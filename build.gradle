apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'signing'
apply plugin: 'maven'
apply from: 'dependencies.gradle'

version='0.0.1-SNAPSHOT'
group='de.otto.edison'

repositories {
    mavenCentral()
}

dependencies {
    compile libs.edisonCore
    compile libs.jackson
    compile libs.springBoot
    compile libs.asyncHttp
    compile libs.logging
    compile libs.jcip

    testCompile libs.testUnit
    testCompile libs.springBootWeb
}

test {
    useTestNG()
    println()
}

idea.project {
    jdkName = "1.8"
    languageLevel = "1.8"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

task askForVersionNumber << {
    def console = System.console()
    def enteredVersion
    if (console) {
        version = trimSnapshot(version)
        enteredVersion = console.readLine('\n\u001B[92m\u001B[1mWhich version do you want to release?\u001B[0m \u001B[2m[' + version + ']\u001B[0m ')
        if (!enteredVersion.isEmpty()) {
            version = enteredVersion
        }
        bumpVersionInGradleFile(version)
    } else {
        logger.error "Cannot get console."
    }
}

def bumpVersionInGradleFile(String theVersion) {
    def myFile = new File('build.gradle')
    def output = ""
    myFile.eachLine { line ->
        output += line.replaceAll('^version\\s*=\\s*.*$', "version='" + theVersion + "'")
        output += "\n"
    }
    def outFile = new File("build.gradle")
    outFile.write(output)
}

def incrementVersion(String theVersion) {
    def versionArray = theVersion.split("\\.")
    def major = versionArray[0].toInteger()
    def minor = versionArray[1].toInteger() + 1
    def patch = 0

    return major + "." + minor + "." + patch;
}

def trimSnapshot(String theVersion) {
    if (theVersion.endsWith("-SNAPSHOT")) {
        return theVersion.substring(0, theVersion.length()-9)
    } else {
        return theVersion;
    }
}


task commitNewVersion << {
    println(["git", "add", "build.gradle"].execute().text.trim())
    println(["git", "commit", "-m", "bump version to " + version].execute().text.trim())
    bumpVersionInGradleFile(incrementVersion(version) + "-SNAPSHOT")
    println(["git", "add", "build.gradle"].execute().text.trim())
    println(["git", "commit", "-m", "bump version to next snapshot"].execute().text.trim())

}

task doRelease {
    dependsOn askForVersionNumber, uploadArchives, commitNewVersion
}

doRelease << {

}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project {
                name 'edison-servicediscovery'
                packaging 'jar'
                description 'Library to access Vault servers and inject secrets into Edison services.'
                url 'https://github.com/otto-de/edison-servicediscovery'

                scm {
                    url 'scm:git@github.com:otto-de/edison-servicediscovery.git'
                    connection 'scm:git@github.com:otto-de/edison-servicediscovery.git'
                    developerConnection 'scm:git@github.com:otto-de/edison-servicediscovery.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'gsteinacker'
                        name 'Guido Steinacker'
                    }
                }
            }
        }
    }
}

commitNewVersion.shouldRunAfter uploadArchives

task wrapper(type: Wrapper) {
    gradleVersion = '2.8'
}
